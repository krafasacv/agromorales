odoo.define('custom_invoice.models', function (require) {
"use strict";

var PosBaseWidget = require('point_of_sale.BaseWidget');
var chrome = require('point_of_sale.chrome');
var gui = require('point_of_sale.gui');
var models = require('point_of_sale.models');
var screens = require('point_of_sale.screens');
var core = require('web.core');

var QWeb = core.qweb;
var _t = core._t;
var _super_posmodel = models.PosModel.prototype;


models.load_fields("res.company", ['rfc', 'regimen_fiscal', 'zip', 'street', 'street2', 'city', 'state_id']);

models.PosModel = models.PosModel.extend({
    initialize: function (session, attributes) {
        // New code
        var partner_model = _.find(this.models, function(model){
            return model.model === 'res.partner';
        });
        partner_model.fields.push('rfc');
		partner_model.fields.push('street2');
		//partner_model.fields.push('state_id.name');

        // Inheritance
        return _super_posmodel.initialize.call(this, session, attributes);
    },
});
// At POS Startup, load the states, and add them to the pos model
models.load_models({
    model: 'res.country.state',
    fields: ['name','code','country_id'],
    // domain: function(self){ return [['country_id','=', self.company.country_id[0]]]; },
    loaded: function(self,states){
        self.states = states;
    },
	});

models.PosModel = models.PosModel.extend({
	push_and_invoice_order: function(order){
        var self = this;
        var invoiced = new $.Deferred(); 

        if(!order.get_client()){
            invoiced.reject({code:400, message:'Missing Customer', data:{}});
            return invoiced;
        }

        var order_id = this.db.add_order(order.export_as_JSON());

        this.flush_mutex.exec(function(){
            var done = new $.Deferred(); // holds the mutex

            // send the order to the server
            // we have a 30 seconds timeout on this push.
            // FIXME: if the server takes more than 30 seconds to accept the order,
            // the client will believe it wasn't successfully sent, and very bad
            // things will happen as a duplicate will be sent next time
            // so we must make sure the server detects and ignores duplicated orders

            var transfer = self._flush_orders([self.db.get_order(order_id)], {timeout:30000, to_invoice:true});
            
            transfer.fail(function(error){
                invoiced.reject(error);
                done.reject();
            });

            // on success, get the order id generated by the server
            transfer.pipe(function(order_server_id){   
                invoiced.resolve();
                done.resolve();
            });

            return done;

        });

        return invoiced;
    },
    
    get_client: function() {
        var order = this.get_order();
        if (order) {
        	if(!order.get_client() && this.config.default_customer) {
        		var client = this.db.get_partner_by_id(this.config.default_customer[0]);
        		this.get_order().set_client(client);
        	}
            return order.get_client();
        }
        return null;
    },

});

var _super_order = models.Order.prototype;

models.Order = models.Order.extend({
    initialize: function(attr, options) {
    	_super_order.initialize.call(this,attr,options);
        this.forma_pago = this.forma_pago || undefined;
        this.methodo_pago = this.methodo_pago || undefined;
        this.uso_cfdi = this.uso_cfdi || undefined;
    },
    set_forma_pago: function(forma_pago){
        this.forma_pago = forma_pago;
        this.trigger('change',this);
    },
    get_forma_pago: function(){
        return this.forma_pago;
    },
    set_methodo_pago: function(methodo_pago){
        this.methodo_pago = methodo_pago;
        this.trigger('change',this);
    },
    get_methodo_pago: function(){
        return this.methodo_pago;
    },
    set_uso_cfdi: function(uso_cfdi){
        this.uso_cfdi = uso_cfdi;
        this.trigger('change',this);
    },
    get_uso_cfdio: function(){
        return this.uso_cfdi;
    },
    export_as_JSON: function(){
        var json = _super_order.export_as_JSON.call(this);
        json.forma_pago = this.forma_pago;
        json.methodo_pago = this.methodo_pago;
        json.uso_cfdi = this.uso_cfdi;
        return json;
    },
    init_from_JSON: function(json){
    	_super_order.init_from_JSON.apply(this,arguments);
        this.forma_pago = json.forma_pago;
        this.methodo_pago = json.methodo_pago;
        this.uso_cfdi = json.uso_cfdi;
    },
});
});
